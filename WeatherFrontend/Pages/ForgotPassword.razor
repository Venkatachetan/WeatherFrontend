@page "/forgot-password"
@layout LoginLayout
@using System.Text.Json
@using MudBlazor
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<style>
    .weather-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: linear-gradient(135deg, #36d1dc 0%, #5b86e5 100%);
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .login-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        padding: 0 20px;
        box-sizing: border-box;
    }

    .login-container {
        width: 100%;
        max-width: 450px;
        margin: 0 auto;
        position: relative;
        z-index: 1;
    }

    .login-card {
        width: 100%;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
    }

    .header-section {
        background: #6b64e2;
        color: white;
        padding: 24px;
        text-align: center;
    }

    .form-section {
        background: white;
        padding: 24px;
    }

    .login-button {
        background-color: #6b64e2 !important;
        color: white !important;
        border-radius: 24px !important;
        padding: 12px !important;
        height: 48px;
    }

    .cloud {
        position: absolute;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 50%;
    }

    .cloud-1 {
        width: 150px;
        height: 60px;
        top: 10%;
        left: 10%;
    }

    .cloud-2 {
        width: 100px;
        height: 40px;
        top: 20%;
        right: 15%;
    }

    .cloud-3 {
        width: 180px;
        height: 70px;
        bottom: 15%;
        left: 5%;
    }

    .cloud-4 {
        width: 120px;
        height: 50px;
        bottom: 25%;
        right: 10%;
    }
</style>

<div class="weather-background">
    <div class="cloud cloud-1"></div>
    <div class="cloud cloud-2"></div>
    <div class="cloud cloud-3"></div>
    <div class="cloud cloud-4"></div>

    <div class="login-wrapper">
        <div class="login-container">
            <MudCard Class="login-card">
                <div class="header-section">
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Medium" Class="mb-2" />
                    <MudText Typo="Typo.h5">Forgot Password</MudText>
                    <MudText Typo="Typo.caption">Reset your account password</MudText>
                </div>

                <div class="form-section">
                    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Password Reset</MudText>

                    <MudTextField @bind-Value="email"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  Class="mb-4"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Validation="@(new Func<string, string>(ValidateEmail))" />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error" Class="my-3" Variant="Variant.Filled">@errorMessage</MudAlert>
                    }

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               OnClick="Submit"
                               DisableElevation="true"
                               Disabled="@(isSubmitting)"
                               Class="login-button mt-4 mb-4">
                        @if (isSubmitting)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                            <text>SENDING...</text>
                        }
                        else
                        {
                            <text>SEND RESET EMAIL</text>
                        }
                    </MudButton>

                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Remember your password? <MudLink Href="/login" Underline="Underline.Hover">Back to Login</MudLink>
                    </MudText>
                </div>
            </MudCard>
        </div>
    </div>
</div>

@code {
    private bool isSubmitting = false;
    private string email = string.Empty;
    private string errorMessage = string.Empty;

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email) || !email.Contains("@"))
        {
            return "Please enter a valid email address.";
        }
        return string.Empty;
    }

    private async Task Submit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;

        try
        {
            var response = await HttpClient.PostAsync(
                $"api/auth/forgot-password?email={Uri.EscapeDataString(email)}",
                null);

            if (response.IsSuccessStatusCode)
            {
                var messageResponse = await response.Content.ReadFromJsonAsync<MessageResponse>();
                if (messageResponse?.Message.Contains("sent") == true)
                {
                    Snackbar.Add("Password reset email sent. Please check your inbox!", Severity.Success);
                    await Task.Delay(2000);
                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    errorMessage = "Failed to send reset email.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var messageResponse = JsonSerializer.Deserialize<MessageResponse>(errorContent);
                errorMessage = messageResponse?.Message ?? "An error occurred.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private class MessageResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}