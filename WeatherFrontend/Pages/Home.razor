@page "/"
@using WeatherFrontend.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-9">
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4">Welcome..!!</MudText>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="@(() => errorMessage = string.Empty)">
            @errorMessage
        </MudAlert>
    }

    @if (showLoginPrompt)
    {
        <MudAlert Severity="Severity.Warning" Class="mb-4">
            You've reached the search limit (5 searches). Please <MudLink Href="/login">login</MudLink> to continue searching.
        </MudAlert>
    }

    <MudPaper Elevation="3" Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" sm="9">
                <MudTextField @bind-Value="citySearch" Label="Enter city name" Variant="Variant.Outlined"
                              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                              OnKeyPress="HandleKeyPress" />
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                           OnClick="@SearchWeatherByCity" Disabled="@showLoginPrompt">Search</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        <MudText Align="Align.Center">Getting weather data...</MudText>
    }
    else if (currentWeather != null)
    {
        <MudGrid>
            <!-- Current Weather Card -->
            <MudItem xs="12">
                <MudPaper Elevation="3" Class="pa-6">
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="12">
                            <MudText Typo="Typo.h4" Align="Align.Center">@currentWeather.City</MudText>
                        </MudItem>

                        <MudItem xs="12" Class="d-flex justify-center mb-2">
                            <MudText Typo="Typo.h1">@GetWeatherEmoji(currentWeather.Weather)</MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudText Typo="Typo.h2" Align="Align.Center">@currentWeather.Temperature</MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center" Class="text-capitalize">@currentWeather.Weather</MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                        </MudItem>

                        <MudItem xs="6">
                            <MudText Align="Align.Center" Class="mud-text-secondary">Wind</MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center">@currentWeather.WindSpeed m/s</MudText>
                        </MudItem>

                        <MudItem xs="6">
                            <MudText Align="Align.Center" Class="mud-text-secondary">Humidity</MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center">@currentWeather.Humidity%</MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private string citySearch = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private bool showLoginPrompt = false;
    private int searchCount = 0;
    private const int MAX_SEARCHES = 5;

    private WeatherData? currentWeather;

    protected override async Task OnInitializedAsync()
    {
        // Reset the search count when the application is reinitialized
        await LocalStorage.SetItemAsync("weatherSearchCount", 0);
        searchCount = 0;

        // Check if the user has already reached the limit
        if (searchCount >= MAX_SEARCHES)
        {
            showLoginPrompt = true;
        }

        await GetLocationWeather();
    }
    private async Task GetLocationWeather()
    {
        try
        {
            isLoading = true;

            // Get user's geolocation using browser API via JS interop
            var coordinates = await GetGeolocationAsync();

            if (coordinates != null)
            {
                await GetWeatherByCoordinates(coordinates.Latitude, coordinates.Longitude);
            }
            else
            {
                errorMessage = "Could not get your location. Please use the search bar.";
                isLoading = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading weather data: {ex.Message}";
            isLoading = false;
        }
    }

    private async Task<GeoCoordinates?> GetGeolocationAsync()
    {
        try
        {
            return await JSRuntime.InvokeAsync<GeoCoordinates>("getGeolocation");
        }
        catch
        {
            return null;
        }
    }

    private async Task GetWeatherByCoordinates(double lat, double lon)
    {
        try
        {
            // Get current weather
            var response = await Http.GetFromJsonAsync<WeatherData>($"api/weather/current-location?lat={lat}&lon={lon}");

            if (response != null)
            {
                currentWeather = response;
            }
            else
            {
                errorMessage = "Could not retrieve weather data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading weather data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchWeatherByCity()
    {
        if (string.IsNullOrWhiteSpace(citySearch))
        {
            errorMessage = "Please enter a city name";
            return;
        }

        // Clear any previous error message
        errorMessage = string.Empty;

        // Check if search limit reached
        if (searchCount >= MAX_SEARCHES)
        {
            showLoginPrompt = true;
            return;
        }

        try
        {
            isLoading = true;

            // Get current weather
            var response = await Http.GetFromJsonAsync<WeatherData>($"api/weather/search?city={Uri.EscapeDataString(citySearch)}");

            if (response != null)
            {
                currentWeather = response;

                // Increment the search count
                searchCount++;
                await LocalStorage.SetItemAsync("weatherSearchCount", searchCount);

                // Check if we've reached the limit after this search
                if (searchCount >= MAX_SEARCHES)
                {
                    showLoginPrompt = true;
                }
            }
            else
            {
                errorMessage = "City not found or weather data unavailable";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading weather data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !showLoginPrompt)
        {
            SearchWeatherByCity();
        }
    }

    private string GetWeatherEmoji(string? description)
    {
        string desc = description?.ToLower() ?? "";

        if (desc.Contains("clear") || desc.Contains("sun"))
            return "☀️";
        else if (desc.Contains("cloud"))
            return "☁️";
        else if (desc.Contains("rain") || desc.Contains("drizzle"))
            return "🌧️";
        else if (desc.Contains("thunderstorm"))
            return "⛈️";
        else if (desc.Contains("snow"))
            return "❄️";
        else if (desc.Contains("mist") || desc.Contains("fog"))
            return "🌫️";
        else
            return "🌤️";
    }

    public class GeoCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}