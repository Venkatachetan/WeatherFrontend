@page "/reset-password"
@layout LoginLayout
@using System.Text.Json
@using MudBlazor
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<style>
    /* Make the background fill the entire viewport */
    .weather-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: linear-gradient(135deg, #36d1dc 0%, #5b86e5 100%);
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .reset-password-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        padding: 0 20px;
        box-sizing: border-box;
    }

    .reset-password-container {
        width: 100%;
        max-width: 450px;
        margin: 0 auto;
        position: relative;
        z-index: 1;
    }

    .reset-password-card {
        width: 100%;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
    }

    .header-section {
        background: #6b64e2;
        color: white;
        padding: 24px;
        text-align: center;
    }

    .form-section {
        background: white;
        padding: 24px;
    }

    .reset-password-button {
        background-color: #6b64e2 !important;
        color: white !important;
        border-radius: 24px !important;
        padding: 12px !important;
        height: 48px;
    }

    /* Cloud elements from login page */
    .cloud {
        position: absolute;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 50%;
    }

    .cloud-1 {
        width: 150px;
        height: 60px;
        top: 10%;
        left: 10%;
    }

    .cloud-2 {
        width: 100px;
        height: 40px;
        top: 20%;
        right: 15%;
    }

    .cloud-3 {
        width: 180px;
        height: 70px;
        bottom: 15%;
        left: 5%;
    }

    .cloud-4 {
        width: 120px;
        height: 50px;
        bottom: 25%;
        right: 10%;
    }
</style>

<div class="weather-background">
    <div class="cloud cloud-1"></div>
    <div class="cloud cloud-2"></div>
    <div class="cloud cloud-3"></div>
    <div class="cloud cloud-4"></div>

    <div class="reset-password-wrapper">
        <div class="reset-password-container">
            <MudCard Class="reset-password-card">
                <div class="header-section">
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Medium" Class="mb-2" />
                    <MudText Typo="Typo.h5">Reset Password</MudText>
                    <MudText Typo="Typo.caption">Create a new password for your account</MudText>
                </div>

                <div class="form-section">
                    <MudForm @ref="form" @bind-IsValid="@isValid" Validation="@ValidateForm">
                        <MudTextField T="string"
                                      @bind-Value="newPassword"
                                      Label="New Password"
                                      Variant="Variant.Outlined"
                                      Class="mb-4"
                                      InputType="@(showNewPassword ? InputType.Text : InputType.Password)"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Lock"
                                      AdornmentAriaLabel="Show Password"
                                      OnAdornmentClick="@(() => showNewPassword = !showNewPassword)"
                                      Required="true"
                                      OnChange="@(() => form.Validate())" />

                        <MudTextField T="string"
                                      @bind-Value="confirmPassword"
                                      Label="Confirm Password"
                                      Variant="Variant.Outlined"
                                      Class="mb-4"
                                      InputType="@(showConfirmPassword ? InputType.Text : InputType.Password)"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Lock"
                                      AdornmentAriaLabel="Show Password"
                                      OnAdornmentClick="@(() => showConfirmPassword = !showConfirmPassword)"
                                      Required="true"
                                      OnChange="@(() => form.Validate())" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <MudAlert Severity="Severity.Error" Class="my-3" Variant="Variant.Filled">@errorMessage</MudAlert>
                        }

                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   FullWidth="true"
                                   Disabled="!isValid || isSubmitting"
                                   OnClick="Submit"
                                   DisableElevation="true"
                                   Class="reset-password-button mt-4 mb-4">
                            @if (isSubmitting)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                <span>Resetting...</span>
                            }
                            else
                            {
                                <span>Reset Password</span>
                            }
                        </MudButton>

                        <MudText Typo="Typo.body2" Align="Align.Center">
                            Remember your password? <MudLink Href="/login" Underline="Underline.Hover">Back to Login</MudLink>
                        </MudText>
                    </MudForm>
                </div>
            </MudCard>
        </div>
    </div>
</div>



@code {
    private MudForm form;
    private bool isValid = false;
    private bool isSubmitting = false;
    private string accessToken = string.Empty;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private bool successMessage = false;
    private bool isTokenFromUrl = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        accessToken = query["access_token"];

        if (string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(uri.Fragment))
        {
            var fragment = uri.Fragment.TrimStart('#');
            var fragmentParams = System.Web.HttpUtility.ParseQueryString(fragment);
            accessToken = fragmentParams["access_token"];
        }

        if (!string.IsNullOrEmpty(accessToken))
        {
            isTokenFromUrl = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await form.Validate();
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private string ValidateForm(object value)
    {
        if (string.IsNullOrWhiteSpace(accessToken))
        {
            return "Reset token is required.";
        }

        var trimmedNewPassword = newPassword?.Trim();
        var trimmedConfirmPassword = confirmPassword?.Trim();

        // Debug the values to confirm they match
        Console.WriteLine($"newPassword: '{trimmedNewPassword}'");
        Console.WriteLine($"confirmPassword: '{trimmedConfirmPassword}'");

        if (string.IsNullOrWhiteSpace(trimmedNewPassword) || trimmedNewPassword.Length < 8)
        {
            return "Password must be at least 8 characters long.";
        }

        if (trimmedNewPassword != trimmedConfirmPassword)
        {
            return "Passwords do not match.";
        }

        return string.Empty;
    }

    private async Task Submit()
    {
        if (form.IsValid)
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            successMessage = false;

            try
            {
                var response = await HttpClient.PostAsync(
                    $"api/auth/reset-password?accessToken={Uri.EscapeDataString(accessToken)}&newPassword={Uri.EscapeDataString(newPassword)}&confirmPassword={Uri.EscapeDataString(confirmPassword)}",
                    null);

                if (response.IsSuccessStatusCode)
                {
                    var messageResponse = await response.Content.ReadFromJsonAsync<MessageResponse>();
                    if (messageResponse?.Message.Contains("successfully") == true)
                    {
                        successMessage = true;
                        Snackbar.Add("Password reset successfully! Please Login", Severity.Success);
                        await Task.Delay(2000);
                        NavigationManager.NavigateTo("/");
                    }
                    else
                    {
                        errorMessage = messageResponse?.Message ?? "Failed to reset password. Please try again.";
                        Snackbar.Add(errorMessage, Severity.Error);
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    var messageResponse = JsonSerializer.Deserialize<MessageResponse>(errorContent);
                    errorMessage = messageResponse?.Message ?? $"Failed to reset password: {response.ReasonPhrase}";
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
                Snackbar.Add(errorMessage, Severity.Error);
            }
            finally
            {
                isSubmitting = false;
            }
        }
    }

    private class MessageResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}